import { Grid } from "@chakra-ui/react";
import Head from "next/head";
import ServerBar from "../components/Discord Components/ServerBar";
import ChannelBar from "../components/Discord Components/ChannelBar";
import Main from "../components/Discord Components/Main";
import db from "../../firebase";
import firebase from "firebase";
import { useState, useEffect } from "react";
import { useRouter } from "next/router";

function Servers() {
  const router = useRouter();
  let servId = router.query.id;
  const [currentuser, setCurrentUser] = useState("");
  useEffect(() => {
    setCurrentUser(JSON.parse(localStorage.getItem("user")));
  }, []);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [server, setServer] = useState([]);
  const [channels, setChannels] = useState([]);
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [currentChannel, setCurrentChannel] = useState(null);

  const getServer = () => {
    db.collection("Servers")
      .doc(servId)
      .onSnapshot((snapshot) => {
        setServer(snapshot.data());
      });
  };

  const getChannels = () => {
    db.collection("Servers")
      .doc(servId)
      .collection("Channels")
      .onSnapshot((snapshot) => {
        let channels = snapshot.docs.map((doc) => ({
          ...doc.data(),
          id: doc.id,
        }));
        setChannels(channels);
        if (channels[0]) setCurrentChannel(channels[0].id);
      });
  };

  const getMessages = () => {
    if (currentChannel)
      db.collection("Servers")
        .doc(servId)
        .collection("Channels")
        .doc(currentChannel)
        .collection("Messages")
        .orderBy("Timestamp", "desc")
        .onSnapshot((snapshot) => {
          let messages = snapshot.docs.map((doc) => doc.data());
          setMessages(messages);
        });
  };

  const getUsers = () => {
    db.collection("Users").onSnapshot((snapshot) => {
      let users = snapshot.docs.map((doc) => doc.data());
      setUsers(users);
    });
  };
  const currentUserTexting = users.find(
    (user) => user.name === currentuser.name
  );

  const sendMessages = (event) => {
    event.preventDefault();
    db.collection("Servers")
      .doc(servId)
      .collection("Channels")
      .doc(currentChannel)
      .collection("Messages")
      .add({
        Message: input,
        Timestamp: firebase.firestore.FieldValue.serverTimestamp(),
        Username: currentuser.name,
      });
    setInput("");
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        getServer();
        getChannels();
      } catch (error) {
        console.log(error);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [servId]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        getMessages();
      } catch (error) {
        console.log(error);
      }
    };
    fetchData();
  }, [currentChannel]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        getUsers();
      } catch (error) {
        console.log(error);
      }
    };
    fetchData();
  }, [users]);

  return (
    <>
      <Head>
        <title>Discord</title>
        <meta name='description' content='Generated by create next app' />
        <link
          rel='icon'
          href='https://japaniste.fr/wp-content/uploads/2019/12/discord-logo-logodownload-download-logotipos-1.png'
        />
      </Head>
      {loading ? (
        "..."
      ) : (
        <Grid h='100vh' templateColumns='72px 240px auto' overflow='hidden'>
          <ServerBar type='server' />
          <ChannelBar
            serverName={server ? server.Name : null}
            channels={channels}
            setCurrentChannel={setCurrentChannel}
          />
          <Main
            users={users}
            currentChannel={currentChannel}
            channels={channels}
            messages={messages}
            sendMessages={sendMessages}
            setInput={setInput}
            input={input}
          />
        </Grid>
      )}
    </>
  );
}

export default Servers;
